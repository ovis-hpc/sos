#!/usr/bin/env python
# Copyright (c) 2014 Open Grid Computing, Inc. All rights reserved.
# Copyright (c) 2019 NTESS Corporation. All rights reserved.
# Under the terms of Contract DE-AC04-94AL85000, there is a non-exclusive
# license for use of this work by or on behalf of the U.S. Government.
# Export of this program may require a license from the United States
# Government.
#
# This software is available to you under a choice of one of two
# licenses.  You may choose to be licensed under the terms of the GNU
# General Public License (GPL) Version 2, available from the file
# COPYING in the main directory of this source tree, or the BSD-type
# license below:
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#      Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#
#      Redistributions in binary form must reproduce the above
#      copyright notice, this list of conditions and the following
#      disclaimer in the documentation and/or other materials provided
#      with the distribution.
#
#      Neither the name of NTESS Corporation, Open Grid Computing nor
#      the names of any contributors may be used to endorse or promote
#      products derived from this software without specific prior
#      written permission.
#
#      Modified source versions must be plainly marked as such, and
#      must not be misrepresented as being the original software.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
from __future__ import print_function
from builtins import str
import shutil
import sys
import argparse
from sosdb import Sos

def fmt_size(size):
    if size < 1000.0:
        return "{0:8.1f}".format(size)
    size /= 1000.0
    if size < 1000.0:
        return "{0:8.1f}K".format(size)
    size /= 1000.0
    if size < 1000.0:
        return "{0:8.1f}M".format(size)
    size /= 1000.0
    if size < 1000.0:
        return "{0:8.1f}G".format(size)
    size /= 1000.0
    if size < 1000.0:
        return "{0:8.1f}T".format(size)
    size /= 1000.0
    return "{0:8.1f}P".format(size)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Manage the partitions in a SOSDB.")
    parser.add_argument("--path", metavar="DB-PATH", required=True,
                        help="Specifies the path to the database.")
    parser.add_argument("--name", metavar="PART-NAME",
                        help="Specifies the parition name.")

    actions = parser.add_mutually_exclusive_group(required=True)
    actions.add_argument("--query", action="store_true",
                        help="Query a container's partitions.")
    actions.add_argument("--create", action="store_true",
                         help="Create a new partition. ")
    actions.add_argument("--state", metavar="STATE-NAME",
                         choices=[ 'primary', 'active', 'offline' ],
                         help="Set the state of a partition.")
    actions.add_argument("--move", action="store_true",
                         help="Move a partition to a new location.")
    actions.add_argument("--remove", action="store_true",
                         help="Remove the partition from the database.")
    actions.add_argument("--delete", action="store_true",
                         help="Remove the partition from the database and delete the data.")
    actions.add_argument("--export", metavar="DB-PATH",
                         help="Export a partitions contents to another database.")

    parser.add_argument("--reindex", action="store_true",
                         help="Add exported objects to all indices.")

    parser.add_argument("--location", metavar="PART-PATH",
                        help="Specifies the location of the partition. " \
                        "Used by the create and move actions.")
    args = parser.parse_args()
    cont = Sos.Container()

    # Open the database
    try:
        cont.open(args.path)
    except Exception as ex:
        print("The database '{0}' could not be opened.".format(args.path))
        sys.exit(1)

    #
    # Query the partitions
    #
    if args.query:
        import datetime as dt
        pi = cont.part_iter()
        print("{0:18} {1:10} {2:18} {3:18} {4:10} {5}". \
              format("Name", "State", "Accessed", "Modified", "Size", "Path"))
        print("{0} {1} {2} {3} {4} {5}". \
              format('-'.ljust(18,'-'), '-'.ljust(10,'-'),
                     '-'.ljust(18,'-'), '-'.ljust(18,'-'), '-'.ljust(11,'-'),
                     '-'.ljust(20,'-')))
        for p in pi:
            stat = p.stat()
            accessed = dt.datetime.fromtimestamp(stat.accessed)
            modified = dt.datetime.fromtimestamp(stat.modified)
            print("{0:18} {1:10} {2:18} {3:18} {4:10} {5}". \
                  format(p.name(), str(p.state()),
                         accessed.strftime("%m/%d/%y %H:%M:%S"),
                         modified.strftime("%m/%d/%y %H:%M:%S"),
                         fmt_size(stat.size), p.path()))
        sys.exit(0)

    if args.create or args.state or args.move or args.delete or args.export:
        if not args.name:
            print("A partition name must be specified.")
            syst.exit(1)
        part = cont.part_by_name(args.name)
        if args.create:
            if part is not None:
                print("The partition name '{0}' already exists.".format(args.name))
                sys.exit(1)
        elif not part:
            print("The partition name '{0}' was not found.".format(args.name))
            sys.exit(1)
    #
    # Create a new partition
    #
    if args.create:
        try:
            cont.part_create(args.name, args.location)
        except Exception as ex:
            print("The partition could not be created.\n{0}".format(ex))
            sys.exit(1)
        sys.exit(0)
    #
    # Change the state of a partition
    #
    if args.state:
        part = cont.part_by_name(args.name)
        if not part:
            print("The part name '{0}' was not found.".format(args.name))
            sys.exit(1)
        try:
            part.state_set(args.state)
        except Exception as ex:
            print("The state could not be set.\n{0}".format(ex))
            sys.exit(1)
        sys.exit(0)
    #
    # Move a partition
    #
    if args.move:
        if not args.location:
            print("The new location for the partition must be specified.")
            sys.exit(1)
        try:
            part.move(args.location)
        except Exception as ex:
            print("The partition could not be moved.\n{0}".format(ex))
            sys.exit(1)
        sys.exit(0)
    #
    # Delete a partition
    #
    if args.remove or args.delete:
        try:
            path = part.path() + '/' + part.name()
            part.delete()
            if args.delete:
                shutil.rmtree(path)
        except Exception as ex:
            print("The partition could not be moved.\n{0}".format(ex))
            sys.exit(1)
        sys.exit(0)

    #
    # Export
    #
    if args.export:
        try:
            dst_sos = Sos.Container(args.export)
            count = part.export(dst_sos, reindex=args.reindex)
            if count < 0:
                print("Error {0} encountered exporting objects".format(count))
            else:
                print("{0} objects exported to the container {1}".format(count, args.export))
        except Exception as ex:
            print("The contents of the partitoin could not be exported.\n{0}".format(ex))
