#!/usr/bin/env python
# Copyright (c) 2014 Open Grid Computing, Inc. All rights reserved.
# Copyright (c) 2019 NTESS Corporation. All rights reserved.
# Under the terms of Contract DE-AC04-94AL85000, there is a non-exclusive
# license for use of this work by or on behalf of the U.S. Government.
# Export of this program may require a license from the United States
# Government.
#
# This software is available to you under a choice of one of two
# licenses.  You may choose to be licensed under the terms of the GNU
# General Public License (GPL) Version 2, available from the file
# COPYING in the main directory of this source tree, or the BSD-type
# license below:
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#      Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#
#      Redistributions in binary form must reproduce the above
#      copyright notice, this list of conditions and the following
#      disclaimer in the documentation and/or other materials provided
#      with the distribution.
#
#      Neither the name of NTESS Corporation, Open Grid Computing nor
#      the names of any contributors may be used to endorse or promote
#      products derived from this software without specific prior
#      written permission.
#
#      Modified source versions must be plainly marked as such, and
#      must not be misrepresented as being the original software.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
from __future__ import print_function
from builtins import str
from builtins import object
import argparse
import curses
from curses.textpad import Textbox, rectangle
from sosdb import Sos
from datetime import datetime
import time
import sys
import math

t0 = 0.0

class SchemaMonitor(object):
    def __init__(self, cont, schema):
        self.cont = cont
        self.schema = schema
        self.indices = {}
        self.cards = []
        self.dups = []
        self.sizes = []
        self.name_len = 0

        for attr in schema:
            if attr.is_indexed():
                nlen = len(attr.name())
                if nlen > self.name_len:
                    self.name_len = nlen
                self.indices[attr.name()] = attr.index()
                self.cards.append(0)
                self.dups.append(0)
                self.sizes.append(0)

    def update_stats(self, stdscr, row, col):
        global t0
        fmt = "{0:" + str(self.name_len+4) + "} {1:16} {2:16} {3:16} {4:16} {5:16} {6:16}"
        stdscr.addstr(row, col, fmt.format("Name",
                                           "Cardinality", "Inserts/s",
                                           "Duplicates", "Inserts/s",
                                           "Size", "Bytes/s"), curses.A_REVERSE)
        row += 1
        i = 0
        t1 = time.time()
        for idx_name in self.indices:
            idx = self.indices[idx_name]
            stats = idx.stats()
            stdscr.addstr(row, 0, idx_name)
            col = self.name_len + 4
            col_width = 16

            c = stats['cardinality']
            d = stats['duplicates']
            s = stats['size']

            if t0 != 0.0:
                diff_time = math.floor(t1 - t0)
                insert_rate = (c - self.cards[i]) // diff_time
                dup_rate = (d - self.dups[i]) // diff_time
                size_rate  = (s - self.sizes[i]) // diff_time
            self.cards[i] = c
            self.dups[i] = d
            self.sizes[i] = s
            i += 1

            stdscr.addstr(row, col, "{0:>{width},} ".format(c, width=col_width))
            col += col_width
            if t0 != 0.:
                stdscr.addstr(row, col, "{0:>{width},} ".format(int(insert_rate), width=col_width))
            col += col_width

            stdscr.addstr(row, col, "{0:>{width},} ".format(d, width=col_width))
            col += col_width
            if t0 != 0.:
                stdscr.addstr(row, col, "{0:>{width},} ".format(int(dup_rate), width=col_width))
            col += col_width

            stdscr.addstr(row, col, "{0:>{width},}".format(s, width=col_width))
            col += col_width
            if t0 != 0.:
                stdscr.addstr(row, col, "{0:>{width},}".format(int(size_rate), width=col_width))

            row += 1
        return row

def csv(arg_list):
    return arg_list.split(',')

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Query metric data in a container.")
    parser.add_argument("-p", "--path", required=True,
                        help="The path to the container.")
    parser.add_argument("-s", "--schema", required=True, type=csv, metavar="NAME-LIST",
                        help="A comma separated list of schema names.")
    parser.add_argument("-r", "--refresh", type=int, default=1, metavar="INTERVAL",
                        help="Specifies the refresh interval in seconds. Default is 1 second.")
    args = parser.parse_args()

    try:
        cont = Sos.Container()
        cont.open(args.path)
    except Exception as ex:
        print("The container '{0}' could not be opened.".format(args.path))
        sys.exit(1)

    schemas = {}
    for name in args.schema:
        schema = cont.schema_by_name(name)
        if not schema:
            print("No schema named '{0}' was found.".format(name))
            sys.exit(1)
        schemas[name] = SchemaMonitor(cont, schema)

    stdscr = curses.initscr()
    curses.noecho()
    curses.cbreak()
    stdscr.nodelay(1)
    stdscr.clear()
    try:
        while stdscr.getch() == -1:
            row = 0
            col = 0
            for name in schemas:
                schema = schemas[name]
                stdscr.addstr(row, col, "Monitoring schema {0} in container {1} at {2}" \
                              .format(name, args.path, datetime.now()))
                row += 2
                row = schema.update_stats(stdscr, row, col)
                row += 2
            t0 = time.time()
            stdscr.refresh()
            time.sleep(args.refresh)

    except Exception as ex:
        stdscr.addstr(24, 0, repr(ex))

    stdscr.getch()
    stdscr.refresh()
    curses.nocbreak()
    stdscr.keypad(False)
    curses.endwin()
    

