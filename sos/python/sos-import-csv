#!/usr/bin/env python
# Copyright (c) 2014 Open Grid Computing, Inc. All rights reserved.
# Copyright (c) 2019 NTESS Corporation. All rights reserved.
# Under the terms of Contract DE-AC04-94AL85000, there is a non-exclusive
# license for use of this work by or on behalf of the U.S. Government.
# Export of this program may require a license from the United States
# Government.
#
# This software is available to you under a choice of one of two
# licenses.  You may choose to be licensed under the terms of the GNU
# General Public License (GPL) Version 2, available from the file
# COPYING in the main directory of this source tree, or the BSD-type
# license below:
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#      Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#
#      Redistributions in binary form must reproduce the above
#      copyright notice, this list of conditions and the following
#      disclaimer in the documentation and/or other materials provided
#      with the distribution.
#
#      Neither the name of NTESS Corporation, Open Grid Computing nor
#      the names of any contributors may be used to endorse or promote
#      products derived from this software without specific prior
#      written permission.
#
#      Modified source versions must be plainly marked as such, and
#      must not be misrepresented as being the original software.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
from __future__ import print_function
from __future__ import division
from builtins import str
from builtins import range
import time
import sys
import argparse
from sosdb import Sos
import struct
import json

def make_cast(attr):
    t = attr.type()
    if t == Sos.TYPE_INT16:
        return lambda s : int(s)
    elif t == Sos.TYPE_INT32:
        return lambda s : int(s)
    elif t == Sos.TYPE_INT64:
        return lambda s : int(s)
    elif t == Sos.TYPE_UINT16:
        return lambda s : int(s)
    elif t == Sos.TYPE_UINT32:
        return lambda s : int(s)
    elif t == Sos.TYPE_UINT64:
        return lambda s : int(s)
    elif t == Sos.TYPE_FLOAT:
        return lambda s : float(s)
    elif t == Sos.TYPE_DOUBLE:
        return lambda s : float(s)
    elif t == Sos.TYPE_LONG_DOUBLE:
        return lambda s : float(s)
    elif t == Sos.TYPE_TIMESTAMP:
        return lambda s : float(s)
    elif t == Sos.TYPE_STRUCT:
        return lambda s : bytearray(s)
    elif t == Sos.TYPE_CHAR_ARRAY:
        return lambda s : str(s)
    elif t == Sos.TYPE_BYTE_ARRAY:
        return lambda s : bytearray(s)
    elif t == Sos.TYPE_INT16_ARRAY:
        return lambda s : [ int(e) for e in s ]
    elif t == Sos.TYPE_INT32_ARRAY:
        return lambda s : [ int(e) for e in s ]
    elif t == Sos.TYPE_INT64_ARRAY:
        return lambda s : [ int(e) for e in s ]
    elif t == Sos.TYPE_UINT16_ARRAY:
        return lambda s : [ int(e) for e in s ]
    elif t == Sos.TYPE_UINT32_ARRAY:
        return lambda s : [ int(e) for e in s ]
    elif t == Sos.TYPE_UINT64_ARRAY:
        return lambda s : [ int(e) for e in s ]
    elif t == Sos.TYPE_FLOAT_ARRAY:
        return lambda s : [ float(e) for e in s ]
    elif t == Sos.TYPE_DOUBLE_ARRAY:
        return lambda s : [ float(e) for e in s ]
    elif t == Sos.TYPE_LONG_DOUBLE_ARRAY:
        return lambda s : [ float(e) for e in s ]
    raise ValueError("Attribute {0} with type {1} is an unsupported cast".format(attr.name(), repr(t)))

def assign_value(obj, line, attr, cast, value):
    """Value is assigned directly to object attribute"""
    obj[attr.attr_id()] = value

def assign_column(obj, line, attr, cast, value):
    """Value is the column number in line"""
    obj[attr.attr_id()] = cast(line[value])

def assign_list(obj, line, attr, cast, value):
    """Value is a list of columns in line to assign to an array attribute in object"""
    obj[attr.attr_id()] = cast([ line[col] for col in value ])

if __name__ == "__main__":
    """
    The sos-import-csv command is used to import Comma Separated Files
    (CSV) into a SOS Container. The selection of which column in the CSV
    file is associated what column in a Container schema is defined in a
    map-file. The map-file is specifid by the --map command line
    argument. A map-file is JSon encoded array of actions. Each each
    action is undertaken serially from the first to the last for each line
    encountered in the CSV file. Lines that begin with '#' are skipped.

    The format of the map file is as follows:

    {[
       { 'action' : <action-name>, [ <action-args> ] },
       . . .
     ]
    }
    """

    parser = argparse.ArgumentParser(description="Import CSV data into a SOS container")
    parser.add_argument("--path", required=True,
                        help="The path to the container.")
    parser.add_argument("--schema", required=True,
                        help="The schema defining the objects being imported")
    parser.add_argument("--map",
                        help="Specifies how CSV columns are mapped to attributes")
    parser.add_argument("--csv",
                        help="The path to the CSV file to import")
    parser.add_argument("--status", action="store_true",
                        help="Show detail import status")
    parser.add_argument("--sep", required=False, default=",",
                        help="Specify a column separator orther than ','")
    args = parser.parse_args()

    cont = Sos.Container()
    try:
        cont.open(args.path)
    except Exception as ex:
        print("The database '{0}' could not be opened.".format(args.path))
        sys.exit(1)

    mf = open(args.map, 'r')
    imap = []                   # an entry for each column
    spec = {}

    schema = cont.schema_by_name(args.schema)
    print("Importing from CSV file {0} into {1} using map {2}".format(args.csv, args.path, args.map))

    try:
        mapspec = json.load(mf)
    except Exception as ex:
        print("{0}".format(repr(ex)))
        sys.exit(1)

    input_process = []
    for spec in mapspec:

        target = spec['target']
        source = spec['source']

        if type(target) == int:
            attr = schema.attr_by_id(target)
        else:
            attr = schema.attr_by_name(target)

        if 'value' in source:
            input_process.append([ assign_value, attr, make_cast(attr), source['value'] ])
        elif 'column' in source:
            input_process.append([ assign_column, attr, make_cast(attr), source['column'] ])
        elif 'list' in source:
            input_process.append([ assign_list, attr, make_cast(attr), source['list'] ])
        elif 'range' in source:
            input_process.append([ assign_list, attr, make_cast(attr),
                                   list(range(source['range'][0], source['range'][1]+1)) ])
        else:
            raise ValueError("Error processing {0}".format(spec))

    df = open(args.csv, 'r')
    count = 0
    t0 = time.time()
    new_recs = 0
    obj = None
    for l in df:
        if l.startswith("#"):
            continue
        if l.endswith("\n"):
            l = l[:-1]
        cols = l.split(args.sep)
        obj = schema.alloc()
        if not obj:
            print("An object with schema {0} could not be allocated.".format(schema.name()))
            sys.exit(1)
        for action in input_process:
            try:
                action[0](obj, cols, action[1], action[2], action[3])
            except Exception as ex:
                print("An exception occurred parsing the CSV input.")
                print("Exception Detail : {0}".format(ex))
                print("Action           : {0}".format(action))
                continue

        if obj:
            obj.index_add()
            del obj
            obj = None

        count += 1
        if args.status:
            new_recs += 1.
            t1 = time.time()
            t = t1 - t0
            if t > 5.0:
                print("{0} records/second".format(new_recs // t))
                new_recs = 0.
                t0 = t1

    cont.close()
    print("Created {0} records".format(count))
