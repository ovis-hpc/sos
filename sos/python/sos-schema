#!/usr/bin/env python3
# Copyright (c) 2021 Open Grid Computing, Inc. All rights reserved.
# Copyright (c) 2019 NTESS Corporation. All rights reserved.
# Under the terms of Contract DE-AC04-94AL85000, there is a non-exclusive
# license for use of this work by or on behalf of the U.S. Government.
# Export of this program may require a license from the United States
# Government.
#
# This software is available to you under a choice of one of two
# licenses.  You may choose to be licensed under the terms of the GNU
# General Public License (GPL) Version 2, available from the file
# COPYING in the main directory of this source tree, or the BSD-type
# license below:
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#      Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#
#      Redistributions in binary form must reproduce the above
#      copyright notice, this list of conditions and the following
#      disclaimer in the documentation and/or other materials provided
#      with the distribution.
#
#      Neither the name of NTESS Corporation, Open Grid Computing nor
#      the names of any contributors may be used to endorse or promote
#      products derived from this software without specific prior
#      written permission.
#
#      Modified source versions must be plainly marked as such, and
#      must not be misrepresented as being the original software.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
from builtins import str
import datetime as dt
import sys
import argparse
from sosdb import Sos
import json
import os
import uuid

def add_schema(cont, path):
    try:
        fp = open(path, 'r')
        spec = json.load(fp)
        schema = Sos.Schema()
        schema.from_template(spec)
        schema.add(cont)
    except Exception as ex:
        print(str(ex))

def query_schema(cont, schema_name=None, uuid_str=None, verbose=False):
    count = 0
    for s in cont.schema_iter():
        if schema_name is not None and s.name() != schema_name:
            continue
        if uuid_str is not None and s.uuid() != uuid.UUID(uuid_str):
            continue
        count += 1
        print(f"{s.name()} '{s.uuid()}'")
        if verbose:
            print("{0:4} {1:24} {2:12} {3:32}".format("Id", "Type", "Indexed", "Name"))
            print("{0} {1} {2} {3}".\
                  format('-'.ljust(4, '-'), '-'.ljust(24,'-'),
                         '-'.ljust(12,'-'), '-'.ljust(32,'-')))
            for a in s:
                if a.is_indexed():
                    idx_s = "True"
                else:
                    idx_s = ""
                aname = a.name()
                type_name = a.type_name()
                if a.type() == Sos.TYPE_STRUCT:
                    type_name += '[' + str(a.size()) + ']'
                elif a.type() == Sos.TYPE_JOIN:
                    idl = a.join_list()
                    aname = str(aname)
                    aname += ' ['
                    comma = False
                    for i in idl:
                        jattr = s.attr_by_id(i)
                        if comma:
                            aname += '+'
                        comma = True
                        aname += jattr.name()
                    aname += ']'
                print("{0:4} {1:24} {2} {3}".\
                      format(a.attr_id(), type_name,
                             idx_s.ljust(12,' '), aname))
    if count == 0 and schema_name is not None:
        print("The schema '{0}' was not found.".format(schema_name))

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Query metric data in a container")
    parser.add_argument("-p", "--path", metavar="PATH", required=True, dest="path",
                        help="The path to the container.")
    parser.add_argument("-s", "--schema", metavar="NAME", dest="schema", default=None,
                         help="The schema name")
    parser.add_argument("-u", "--uuid", metavar="NAME", dest="uuid", default=None,
                         help="The schema UUID string")
    parser.add_argument("-v", "--verbose", action="store_true",
                         help="Print the schema and all of its attributes")
    actions = parser.add_mutually_exclusive_group(required=True)
    actions.add_argument("-q", "--query", action="store_true", dest="query",
                         help="Query a container's schema. Use the --schema "
                         "option to query a single schema")
    actions.add_argument("-a", "--add", metavar="PATH", dest="add",
                         help="Add the schema defined in the file at PATH to the container.")
    actions.add_argument("-e", "--export", metavar="PATH", dest="export_path",
                         help="Export all schema in the container to a JSON formatted "
                         "file. This file may be imported into another container using the "
                         "--import option.")
    actions.add_argument("-i", "--import", metavar="PATH", dest="import_path",
                         help="Import all schema in the specified JSON formatted file.")
    args = parser.parse_args()


    if args.export_path:
        try:
            sdir = Sos.export_schema(args.path, args.export_path)
        except:
            print(f"Error accessing container '{args.path}'")
            sys.exit(1)
        sys.exit(0)

    try:
        cont = Sos.Container()
        cont.open(args.path)
    except:
        print(f"The container {args.path} could not be opened.")
        sys.exit(1)

    if args.import_path:
        try:
            fp = open(args.import_path)
            sdir = json.load(fp)
            for spec in sdir['schemas']:
                schema = Sos.Schema()
                schema.from_template(spec)
                schema.add(cont)

        except Exception as ex:
            print(str(ex))

    if args.query:
        if args.schema:
            query_schema(cont, schema_name=args.schema, verbose=args.verbose)
        elif args.uuid:
            query_schema(cont, uuid_str=args.uuid, verbose=args.verbose)
        else:
            query_schema(cont, verbose=args.verbose)

    if args.add:
        add_schema(cont, args.add)
